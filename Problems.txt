
//Merge Sort//
public static void merge(int A[],int low,int mid,int high)
  {  
     int n1=mid-low+1,n2=high-mid;
     int left[]=new int[n1];
     int right[]=new int[n2];
     for(int i=0;i<n1;i++)
     left[i]=A[low+i];
     for(int j=0;j<n2;j++)
     right[j]=A[mid+j+1];
     int i=0,j=0,k=low;
     while(i<n1&&j<n2)
     {
      if(left[i]<=right[j])
      A[k++]=left[i++];
      else
      A[k++]=right[j++];
     }
     while(i<n1)
     A[k++]=left[i++];
     while(j<n2)
     A[k++]=right[j++];
    
  }
  public static void mergesort(int arr[],int l,int h)
  {
    if(h>l)
    { int m=(l+h)/2;
      mergesort(arr,l,m);
      mergesort(arr,m+1,h);
      merge(arr,l,m,h);
    }
}



__________________________________________________________________________________________________________________________________________
problem statement:Merged Intervals
Code: import java.util.*;
class student 
{
  int a;
  int b;
  public student(int a, int b) {
    this.a = a;
    this.b = b;
  }
      public String toString() {
        return "student{" +
                "a=" + a +
                ", b=" + b +
                '}';
    }
};
class comp
{
	  public static void main(String[]args)
    {  
      Comparator<student> comp=new Comparator<student>()
      {
        public int compare(student s1,student s2)
        {
            if(s1.a>s2.a)
              return 1;
            else
            return -1;
        }
      };
      student arr[]={
      new student(1,3),
      new student(2,4),
      new student(5,7),
      new student(6,8),
      new student(1,4),
      new student(5, 8),
      };
       Arrays.sort(arr,comp);
       int res=0;
       for(int i=1;i<arr.length;i++)
      {
        if(arr[res].b>=arr[i].a)
        {
          arr[res].a=Math.min(arr[i].a,arr[res].a);
          arr[res].b=Math.max(arr[i].b,arr[res].b);
        }
        else{
        res++;
        arr[res]=arr[i];
      }
    }
      for(int k=0;k<= res;k++)
        System.out.println(arr[k].a+","+arr[k].b);
}
}
__________________________________________________________________________________________________________________________________________

Problem statement:insertion using linear probing(method of Hashing)

public static int[] linearProbing(int hash_size, int arr[], int sizeOfArray)
    {   int table[]=new int[hash_size];
        Arrays.fill(table,-1);
        int size=0;
        for(int k=0;k<sizeOfArray;k++)
        {   
            if(size==hash_size)
                break;
            int h=hash(arr[k],hash_size);
            int i=h;
            while(table[i]!=-1&&table[i]!=arr[k])
                i=(i+1)%hash_size;
            if(arr[k]==table[i])
               continue;
            else
            {
                table[i]=arr[k];
                size++;
            }
               
        }
        return table;
        
    }
    public int hash(int key,int h){
      return key%h;
    }

 _______________________________________________________________________________________________________________________

Problem-How to directly sort 2d Array on the basis of first element.

import java.util.*;
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,Comparator.comparingInt(a->a[0]));
        return intervals;
    }
}
________________________________________________________________________________________________________________________
Problem-Merge intervals and return the 2D array consisting of all merged intervals.

import java.util.*;

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));
        ArrayList<int[]> list = new ArrayList<>();
        int[] current = intervals[0];
        for (int i = 1; i < intervals.length; i++) {
            int[] inter = intervals[i];
            if (current[1] >= inter[0]) {
                current[1] = Math.max(current[1], inter[1]);
            } else {
                list.add(current);
                current = inter;
            }
        }
        list.add(current);
        return list.toArray(new int[list.size()][]);
    }
}
________________________________________________________________________________________________________________________

Problem Statement-Given an integer array nums, find the subarray with the largest sum, and return its sum.

Code:class Solution {
    public int maxSubArray(int[] nums) {
        int sum=0;
        int res=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            if(sum<0)
            sum=nums[i];
            else
            sum+=nums[i];
            res=Math.max(res,sum);
        }//Kadanes Algorithm
        return res;
    }
}
________________________________________________________________________________________________________________________

Problem Statement-Given an array A of positive integers. Your task is to find the leaders in the array. An element of array is leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.

Input:
n = 6
A[] = {16,17,4,3,5,2}
Output: 17 5 2
Explanation: The first leader is 17
as it is greater than all the elements
to its right.  Similarly, the next
leader is 5. The right most element
is always a leader so it is also
included


Input:
n = 5
A[] = {1,2,3,4,0}
Output: 4 0
Explanation: 0 is the rightmost element
and 4 is the only element which is greater
than all the elements to its right.


class Solution{
    //Function to find the leaders in the array.
    static ArrayList<Integer> leaders(int arr[], int n){
        // Your code here
        ArrayList<Integer> list=new ArrayList<>();
        int max=-1;
        for(int i=n-1;i>=0;i--)
        {
            if(arr[i]>=max){
             max=arr[i];
            list.add(0,max);//shifts the element 1 index ahead at each iteration
            }
            
        }
        return list;
    }
}
