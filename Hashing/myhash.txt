Problem Statement-You are given an array arr[] of size n. Find the total count of sub-arrays having their sum equal to 0.

class Solution{
    //Function to count subarrays with sum equal to 0.
    public static long findSubarray(long[] arr ,int n)
    {
        HashMap<Long,Long> map=new HashMap<>();
        long curr=0;long c=0;
        for(int i=0;i<n;i++)
        {   curr+=arr[i];
            if(curr==0)
            c++;
            if(map.containsKey(curr))
            c=c+map.get(curr);
            map.put(curr,map.getOrDefault(curr,0L)+1);
        }
        return c;

    }
}

Problem Statement-Given an unsorted array of integers and a sum. The task is to count the number of subarray which adds to the given sum.

class Solution
{
    //Function to count the number of subarrays which adds to the given sum.
    static int subArraySum(int arr[], int n, int sum)
    {
        // add your code here
        HashMap<Integer,Integer> set=new HashMap<>();
        int curr=0;int c=0;
        for(int i=0;i<n;i++)
        {
            curr+=arr[i];
            if(curr==sum)
            c++;
            if(set.containsKey(curr-sum))
            c=c+set.get(curr-sum);
            if(set.containsKey(curr))
            set.put(curr,set.getOrDefault(curr,0)+1);
            else
            set.put(curr,set.getOrDefault(curr,0)+1);

        }
        return c;
    }
}
