Problem Statement-You are given an array arr[] of size n. Find the total count of sub-arrays having their sum equal to 0.

class Solution{
    //Function to count subarrays with sum equal to 0.
    public static long findSubarray(long[] arr ,int n)
    {
        HashMap<Long,Long> map=new HashMap<>();
        long curr=0;long c=0;
        for(int i=0;i<n;i++)
        {   curr+=arr[i];
            if(curr==0)
            c++;
            if(map.containsKey(curr))
            c=c+map.get(curr);
            map.put(curr,map.getOrDefault(curr,0L)+1);
        }
        return c;

    }
}
________________________________________________________________________________________________________________________
Problem Statement-Given an unsorted array of integers and a sum. The task is to count the number of subarray which adds to the given sum.

class Solution
{
    //Function to count the number of subarrays which adds to the given sum.
    static int subArraySum(int arr[], int n, int sum)
    {
        // add your code here
        HashMap<Integer,Integer> set=new HashMap<>();
        int curr=0;int c=0;
        for(int i=0;i<n;i++)
        {
            curr+=arr[i];
            if(curr==sum)
            c++;
            if(set.containsKey(curr-sum))
            c=c+set.get(curr-sum);
            if(set.containsKey(curr))
            set.put(curr,set.getOrDefault(curr,0)+1);
            else
            set.put(curr,set.getOrDefault(curr,0)+1);

        }
        return c;
    }
}
________________________________________________________________________________________________________________________

Problem Statement:find the length of the longest subarray with given sum using hashmap

public static void main(String args[]) {
        int arr[]={8,3,7};
        int sum=15;
        HashMap<Integer,Integer> h=new HashMap<>();
        int curr=0;int res=0;
        //longest subarray with given sum
        for(int i=0;i<arr.length;i++){
            curr+=arr[i];
            if(curr==sum){
                res=i+1;
            }
            if(h.containsKey(curr)==false){
                h.put(curr,i);
            }
            if(h.containsKey(curr-sum)){
                res=Math.max(res,i-h.get(curr-sum));
            }
        }

   }

________________________________________________________________________________________________________________________

Problem statement-Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Example 1:

Input:
N = 7
a[] = {2,6,1,9,4,5,3}
Output:
6
Explanation:
The consecutive numbers here
are 1, 2, 3, 4, 5, 6. These 6
numbers form the longest consecutive
subsquence.


code:
class Solution
{   
    // arr[] : the input array
    // N : size of the array arr[]
    
    //Function to return length of longest subsequence of consecutive integers.
	static int findLongestConseqSubseq(int arr[], int N)
	{
	   // add your code here
	   HashSet<Integer> set=new HashSet<>();
	   for(int i=0;i<N;i++)
	     set.add(arr[i]);
	   int res=0;
	   for(int i=0;i<N;i++)
	   {
	       if(set.contains(arr[i]-1)==false)
	       {
	           int curr=1;
	           while(set.contains(arr[i]+curr))
	            curr++;
	           res=Math.max(res,curr);
	       }
	   }
	   return res;
	}
}
